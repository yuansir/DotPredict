import React, { useState } from 'react';
import { useGameContext } from '../contexts/GameContext';
import { useMatrixManagement } from '../hooks/useMatrixManagement';
import { useGameActions } from '../hooks/useGameActions';
import { ControlPanel } from './ControlPanel';
import { DateSelector } from './DateSelector';
import { useAlert } from '../contexts/AlertContext';

/**
 * GameContainer组件 - 游戏主容器，管理游戏界面和交互
 */
export const GameContainer: React.FC = () => {
  // 获取游戏状态及操作方法
  const {
    gameState, 
    setGameState, 
    availableSessions, 
    selectedSession,
    currentSessionId, 
    isPreviewMode,
    selectedDate,
    saveGameState,
    handleDateChange,
    handleSessionChange,
    endCurrentSession,
    clearCurrentSessionData,
    loadSessionData
  } = useGameContext();

  // 色彩矩阵管理
  const { 
    matrixData, 
    addColorToMatrix, 
    undoLastMove, 
    clearAllData 
  } = useMatrixManagement(gameState, setGameState);

  // 游戏操作
  const { 
    handleColorSelect, 
    handleUndo, 
    handleClear, 
    toggleHistoryMode 
  } = useGameActions(
    gameState, 
    setGameState, 
    saveGameState, 
    addColorToMatrix, 
    undoLastMove, 
    clearAllData,
    clearCurrentSessionData
  );

  // 会话是否处于激活状态
  const isActiveSession = selectedSession === "新一轮输入中";

  // 使用Alert系统
  const { showAlert } = useAlert();

  // 终止当前会话
  const handleEndSession = async () => {
    if (!isActiveSession || gameState.history.length === 0) {
      showAlert('没有活动的会话或会话中没有数据', 'warning');
      return;
    }
    
    if (window.confirm('确定要终止当前输入会话吗？终止后将不能继续在本会话中输入数据。')) {
      try {
        await endCurrentSession();
        showAlert('会话已成功终止', 'info');
      } catch (error) {
        console.error('终止会话失败:', error);
        showAlert('终止会话失败，请重试', 'error');
      }
    }
  };

  // 处理完成编辑的函数
  const handleFinishEdit = () => {
    if (endCurrentSession) {
      handleEndSession();
    }
  };

  // 选择日期处理函数
  const onDateChange = (newDate: string) => {
    handleDateChange(newDate);
  };

  // 选择会话处理函数
  const onSessionChange = (sessionId: string) => {
    handleSessionChange(sessionId);
  };

  return (
    <div className="flex flex-col space-y-6">
      {/* 顶部控制栏 */}
      <div className="bg-white p-4 rounded-lg shadow-md flex flex-col space-y-4">
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between space-y-4 sm:space-y-0">
          {/* 日期选择器 */}
          <span className="inline-flex items-center">
            <svg className="w-5 h-5 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            日期选择
          </span>

          {/* 模式切换按钮 */}
          <div className="flex rounded-md shadow-sm" role="group">
            <button
              className={`px-4 py-2 text-sm font-medium ${!isPreviewMode ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'} rounded-l-lg focus:z-10 focus:ring-2 focus:ring-blue-500 focus:text-white`}
              onClick={() => toggleHistoryMode(false)}
            >
              输入模式
            </button>
            <button
              className={`px-4 py-2 text-sm font-medium ${isPreviewMode ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'} rounded-r-lg focus:z-10 focus:ring-2 focus:ring-blue-500 focus:text-white`}
              onClick={() => toggleHistoryMode(true)}
            >
              预览模式
            </button>
          </div>
        </div>

        <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
          {/* 日期选择器 */}
          <input
            type="date"
            className="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            value={selectedDate}
            onChange={(e) => onDateChange(e.target.value)}
          />

          {/* 会话选择器 */}
          <select
            className="w-full sm:w-auto px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            value={selectedSession}
            onChange={(e) => onSessionChange(e.target.value)}
            disabled={!isPreviewMode && isActiveSession && gameState.history.length > 0}
          >
            {availableSessions.map((session) => (
              <option key={session.value} value={session.value}>
                {session.label}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* 主要内容区 */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* 左侧：矩阵面板 */}
        <div className="lg:col-span-2 bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-bold text-gray-800 mb-4">输入矩阵</h2>
          <div className="mb-6">
            <div className="overflow-x-auto">
              {/* 列标签 */}
              <div className="flex mb-1 border-b pb-1">
                <div className="w-8 mr-2"></div>
                {Array(24).fill(null).map((_, idx) => (
                  <div key={`col-${idx}`} className="w-8 mr-2 text-center text-xs font-medium text-gray-500">
                    {idx + 1}
                  </div>
                ))}
              </div>

              {/* 矩阵内容 */}
              {[0, 1, 2].map((row) => (
                <div key={`row-${row}`} className="flex mb-3 items-center">
                  {Array(24).fill(null).map((_, col) => {
                    // 获取当前单元格的颜色（如果有）
                    const cellColor = matrixData[row] && matrixData[row][col];

                    return (
                      <div
                        key={`${row}-${col}`}
                        className="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center mr-2"
                        onClick={() => !gameState.isViewingHistory && handleColorSelect(matrixData[row] && matrixData[row][col] === 'red' ? 'black' : 'red')}
                      >
                        {cellColor && (
                          <div
                            className="w-6 h-6 rounded-full"
                            style={{ backgroundColor: cellColor }}
                          ></div>
                        )}
                      </div>
                    );
                  })}
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* 右侧：预测和控制面板 */}
        <div className="lg:col-span-1 space-y-6">
          {/* 预测面板 */}
          <div className="bg-white p-4 rounded-lg shadow-md">
            <h2 className="text-xl font-bold text-gray-800 mb-4">预测矩阵</h2>
            
            {/* 预测列标题 */}
            <div className="flex mb-3 border-b pb-2">
              <div className="w-16 text-center text-sm font-medium text-gray-700 whitespace-nowrap">连续性</div>
              <div className="w-16 text-center text-sm font-medium text-gray-700 whitespace-nowrap">规则</div>
            </div>

            {/* 预测列内容 */}
            {[0, 1, 2].map((row) => (
              <div key={`prediction-row-${row}`} className="flex mb-3 items-center">
                {/* 连续性预测 */}
                <div className="w-16 flex justify-center">
                  <div className="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center">
                    {gameState.predictionStats[row]?.continuityPrediction && (
                      <div
                        className="w-6 h-6 rounded-full"
                        style={{ backgroundColor: gameState.predictionStats[row].continuityPrediction }}
                      ></div>
                    )}
                  </div>
                </div>
                
                {/* 规则预测 */}
                <div className="w-16 flex justify-center">
                  <div className="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center">
                    {gameState.predictionStats[row]?.rulePrediction && (
                      <div
                        className="w-6 h-6 rounded-full"
                        style={{ backgroundColor: gameState.predictionStats[row].rulePrediction }}
                      ></div>
                    )}
                  </div>
                </div>
              </div>
            ))}

            {/* 准确率显示 */}
            <div className="mt-4 p-3 bg-gray-50 rounded-md">
              <p className="text-sm text-gray-700">
                总预测：<span className="font-medium">{gameState.totalPredictions}</span>
              </p>
              <p className="text-sm text-gray-700">
                正确预测：<span className="font-medium">{gameState.correctPredictions}</span>
              </p>
              <p className="text-sm text-gray-700">
                准确率：<span className="font-medium">
                  {gameState.totalPredictions > 0 
                    ? `${(gameState.correctPredictions / gameState.totalPredictions * 100).toFixed(2)}%` 
                    : '0%'}
                </span>
              </p>
            </div>
          </div>

          {/* 控制面板 */}
          <ControlPanel
            onColorSelect={handleColorSelect}
            onUndo={handleUndo}
            onClear={handleClear}
            onEndSession={handleEndSession}
            totalMoves={gameState.history ? gameState.history.length : 0}
            isViewingHistory={gameState.isViewingHistory}
          />
        </div>
      </div>
    </div>
  );
};
